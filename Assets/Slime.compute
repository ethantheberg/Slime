#pragma kernel Update

uint height;
uint width;

struct Agent {
    float2 position; 
    float angle;
};
    
RWStructuredBuffer<Agent> agents;
uint numAgents;
RWTexture2D<float> trailMap;

float moveSpeed;
float turnSpeed;
float trailStrength;

float sensorDistance;
float sensorAngle;

float2 mousePosition;
bool mouseDown;

float deltaTime;
float time;

uint hash(uint state) {
    state ^= 2747636419u; 
    state *= 2654435769u; 
    state ^= state >> 16; 
    state *= 2654435769u; 
    state ^= state >> 16; 
    state *= 2654435769u;
    return state;
}
float scaleHash(uint state)
{
    return state / 4294967295.0;
}

float sense(Agent agent, float angle, float distance) {
    float2 direction = float2(cos(agent.angle + angle), sin(agent.angle + angle));
    float2 center = agent.position + direction * distance;
    int2 texCoord = int2(center);
    
    float sum = 0;
    for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
            int clampedX = (texCoord.x + i + width) % width;
            int clampedY = (texCoord.y + j + height) % height;
            sum += trailMap[int2(clampedX, clampedY)];
        }
    }
    return sum/25;
}
float senseWeightingFunction(float x) {
    return x;
    if(x < 0.8){
        return x*(1.6-x)/0.64;
    }
    else {
        return 1-25*(x-0.8)*(x-0.8);
    }
}

[numthreads(1024,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    if (id.x > numAgents) { return; }

    float PI = 3.14159;
    
    uint random = hash(agents[id.x].position.y * width + agents[id.x].position.x + hash(id.x + time * 100000));

    float left = senseWeightingFunction(sense(agents[id.x], sensorAngle, sensorDistance));
    float center = senseWeightingFunction(sense(agents[id.x], 0, sensorDistance));
    float right = senseWeightingFunction(sense(agents[id.x], -sensorAngle, sensorDistance));
    
    //*
    if (left > center && left > right) {
        agents[id.x].angle += scaleHash(random)*turnSpeed*deltaTime;
    } else if (right > center && right > left) {
        agents[id.x].angle -= scaleHash(random)*turnSpeed*deltaTime;
    } else {
        agents[id.x].angle += (scaleHash(random)-0.5)*turnSpeed*deltaTime;
    }
    //*/
    
    float2 direction = float2(cos(agents[id.x].angle), sin(agents[id.x].angle));
    if(mouseDown) {
        direction = normalize(mousePosition - agents[id.x].position);
        //newPosition = agents[id.x].position + direction;
    }
    float localStrength = sense(agents[id.x], 0, 0)*2;
    float2 newPosition = agents[id.x].position + direction * moveSpeed * localStrength *deltaTime;
    newPosition.x = (newPosition.x + width) % width;
    newPosition.y = (newPosition.y + height) % height;
    
    int2 texCoord = int2(newPosition);
    trailMap[texCoord] = min(1, trailMap[texCoord] + trailStrength*deltaTime);
    agents[id.x].position = newPosition;
}

#pragma kernel FadeTexture
RWTexture2D<float> fadedTrailMap;
float diffuseRate;
float decayRate;

[numthreads(32,32,1)]
void FadeTexture(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
		return;
	}

    float original = trailMap[id.xy];
    float sum = 0;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            int clampedX = (id.x + i + width) % width;
            int clampedY = (id.y + j + height) % height;
            sum += trailMap[int2(clampedX, clampedY)];
        }
    }
    float blurred = min(1, lerp(original, sum / 9, diffuseRate*deltaTime));
    fadedTrailMap[id.xy] = min(1, blurred*(1 - decayRate*deltaTime)-0.000001);
}

#pragma kernel UpdateDisplayTexture
RWTexture2D<float4> displayTexture;
RWTexture2D<float4> gradientTexture;

[numthreads(32,32,1)]
void UpdateDisplayTexture(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
        return;
    }
    float test = 0.5;
    displayTexture[id.xy] = gradientTexture[uint2(uint(trailMap[id.xy]*255), 0)];
    //displayTexture[id.xy] = gradientTexture[int2(128, 0)];
}